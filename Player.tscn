[gd_scene load_steps=8 format=2]

[ext_resource path="res://art/playerGrey_up1.png" type="Texture" id=2]
[ext_resource path="res://art/playerGrey_up2.png" type="Texture" id=3]
[ext_resource path="res://art/playerGrey_walk1.png" type="Texture" id=4]
[ext_resource path="res://art/playerGrey_walk2.png" type="Texture" id=5]

[sub_resource type="GDScript" id=3]
script/source = "extends Area2D
signal hit #envia una señal cuando colisiona con algo

export var speed = 400 # How fast the player will move (pixels/sec).
var screen_size # Size of the game window.
var velocity = Vector2.ZERO # el vector de velocidad de movimiento del jugador (velocidad en ejes x e y) (.ZERO para que arranque (0.0).
# Called when the node enters the scene tree for the first time.
func _ready():
	screen_size = get_viewport_rect().size #Detecta el tamaño de la pantalla
	hide()

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	
	if Input.is_action_pressed(\"move_right\"):
		velocity.x += 1
	if Input.is_action_pressed(\"move_left\"):
		velocity.x -= 1
	if Input.is_action_pressed(\"move_down\"):
		velocity.y += 1
	if Input.is_action_pressed(\"move_up\"):
		velocity.y -= 1

	if velocity.length() > 0:
		velocity = velocity.normalized() * speed #para que el movimiento en diagonal no tenga mas velocidad
		$AnimatedSprite.play()
	else:
		$AnimatedSprite.stop()
	
	position += velocity * delta
	position.x = clamp(position.x, 0, screen_size.x) #clamp restringe un valor a un determinado rango, pone los limites al jugador
	position.y = clamp(position.y, 0, screen_size.y)
	
	if velocity.x != 0: #pregunto si el jugador se esta moviendo izquierda a derecha
		$AnimatedSprite.animation = \"walk\" #entonces es animacion de caminar
		$AnimatedSprite.flip_v = false
		$AnimatedSprite.flip_h = velocity.x < 0 #si la velocidad en x es negativa invierto la animacion para que valla a la izquierda
	elif velocity.y != 0: #pregunto si el jugador se esta moviendo arriba a abajo
		$AnimatedSprite.animation = \"up\" #entonces es animacion de subir
		$AnimatedSprite.flip_v = velocity.y > 0 #si la velocidad en y es negativa invierto la animacion para que valla para abajo
		
	
func _on_Player_body_entered(body): #es una funcion conectada a una señal (hit)
	hide() # Muerte del jugador cuando choca contra un enemigo (desaparece)
	Input.vibrate_handheld(500)
	emit_signal(\"hit\") #emite la señal de que fue golpeado
	#Luego de colisionar se desactiva la colision asi no emite multiples señales
	#Al hacerlo se debe realizar con set_deferred para hacerlo de manera segura sin producir errores
	$CollisionShape2D.set_deferred(\"disabled\", true)
	

func start(pos): #funcion para resetear al jugador despues de morir
	position = pos #resetea la posicion
	show() #hace visible al personaje
	$CollisionShape2D.disabled = false #abilita la colision del personaje
	

func _on_Mobile_use_move_vector(move_vector): #Joystick
	velocity = Vector2(round(move_vector.x),round(move_vector.y))
	
"

[sub_resource type="SpriteFrames" id=1]
animations = [ {
"frames": [ ExtResource( 2 ), ExtResource( 3 ) ],
"loop": true,
"name": "up",
"speed": 5.0
}, {
"frames": [ ExtResource( 4 ), ExtResource( 5 ) ],
"loop": true,
"name": "walk",
"speed": 5.0
} ]

[sub_resource type="CapsuleShape2D" id=2]
radius = 27.0
height = 16.0

[node name="Player" type="Area2D"]
scale = Vector2( 2, 2 )
script = SubResource( 3 )

[node name="AnimatedSprite" type="AnimatedSprite" parent="."]
scale = Vector2( 0.5, 0.5 )
frames = SubResource( 1 )
animation = "up"
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )
__meta__ = {
"_edit_group_": true
}

[connection signal="body_entered" from="." to="." method="_on_Player_body_entered"]
